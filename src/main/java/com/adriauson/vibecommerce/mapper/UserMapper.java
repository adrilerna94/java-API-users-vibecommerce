package com.adriauson.vibecommerce.mapper;

import com.adriauson.vibecommerce.dto.RegisterUserDto;
import com.adriauson.vibecommerce.dto.UpdateUserDto;
import com.adriauson.vibecommerce.dto.UserDto;
import com.adriauson.vibecommerce.entity.User;
import org.springframework.stereotype.Component;

// pod√≠a haber usado modelMapper para hacer el mapeo autom√°tico
// De momento lo hago as√≠ para entender mejor el mapeo


/*
 * üü° ADVERTENCIA: "Static member accessed via instance reference"
 *
 * ¬øQu√© significa?
 * --------------------------------------------------
 * Este mensaje aparece cuando est√°s llamando un m√©todo `static` como si fuera un m√©todo de instancia.
 *
 * Ejemplo que genera el warning:
 *     userMapper.mapRegisterDtoToUser(dto);  // INCORRECTO (si el m√©todo es static)
 *
 * Java lo permite, pero es incorrecto desde el punto de vista del dise√±o.
 * La forma correcta de invocar un m√©todo est√°tico es usando directamente el nombre de la clase:
 *
 *     UserMapper.mapRegisterDtoToUser(dto);  // CORRECTO
 *
 * --------------------------------------------------
 * ¬øQu√© opciones tengo?
 *
 * ‚úÖ Opci√≥n 1: Mantener los m√©todos como `static`
 * - Es apropiado si `UserMapper` es una clase puramente utilitaria (sin estado).
 * - No hace falta inyectarla como dependencia.
 * - Elimina cualquier instancia inyectada (`@Autowired`) de UserMapper.
 *
 * Ejemplo:
 *     public class UserMapper {
 *         public static User mapRegisterDtoToUser(RegisterUserDto dto) { ... }
 *     }
 *
 *     // Llamada desde cualquier lugar:
 *     User user = UserMapper.mapRegisterDtoToUser(dto);
 *
 * ‚úÖ Opci√≥n 2: Convertir `UserMapper` en un componente Spring inyectable (no static)
 * - Es la mejor pr√°ctica si quieres seguir un dise√±o orientado a objetos limpio y flexible.
 * - Permite pruebas m√°s sencillas y separaci√≥n clara de responsabilidades.
 *
 * Pasos:
 * 1. Eliminar `static` de los m√©todos del mapper.
 * 2. Anotar la clase con `@Component`.
 * 3. Inyectarla con constructor injection.
 *
 * Ejemplo:
 *     @Component
 *     public class UserMapper {
 *         public User mapRegisterDtoToUser(RegisterUserDto dto) { ... }
 *     }
 *
 *     @Service
 *     public class UserServiceImpl implements UserService {
 *         private final UserMapper userMapper;
 *
 *         public UserServiceImpl(UserRepository repo, UserMapper userMapper) {
 *             this.userRepository = repo;
 *             this.userMapper = userMapper;
 *         }
 *
 *         public void register(RegisterUserDto dto) {
 *             User user = userMapper.mapRegisterDtoToUser(dto);
 *         }
 *     }
 *
 * --------------------------------------------------
 * ‚úÖ Recomendaci√≥n para aprendizaje:
 * Si est√°s empezando y quieres aprender bien, utiliza la opci√≥n 2.
 * Te ayudar√° a entender mejor c√≥mo funciona Spring, los beans y la inyecci√≥n de dependencias.
 */


/*
La anotaci√≥n @Component en Spring marca una clase como un componente gestionado por el contenedor de Spring.
Es una de las anotaciones clave para habilitar la inyecci√≥n de dependencias autom√°tica.
*/

@Component
public class UserMapper {

    public UserDto mapUserToUserDto(User user){

        UserDto userDto = new UserDto();

        userDto.setId(user.getId());
        userDto.setFirstName(user.getFirstName());
        userDto.setLastName(user.getLastName());

        // en casos normales no mostrar√≠amos la contrase√±a ni *****
        // lo hacemos a modo de ejemplo
        userDto.setPassword("*****");
        userDto.setEmail(user.getEmail());
        userDto.setAddress(user.getAddress());

        return userDto;

    }

    public User mapRegisterDtoToUser(RegisterUserDto registerDto){

        User user = new User();

        user.setFirstName(registerDto.getFirstName());
        user.setLastName(registerDto.getLastName());

        // aqui hashear√≠amos la contrase√±a antes de guardarla
        user.setPassword(registerDto.getPassword());
        user.setEmail(registerDto.getEmail());
        user.setAddress(registerDto.getAddress());

        return user;

    }

    // no devolvemos nada --> ya que trabajamos con el objeto original. Modifica por referencia no por copia.
    public void mapUpdateUserDtoToExistingUser(UpdateUserDto updateDto, User user){

        if (updateDto.getFirstName() != null) {
            user.setFirstName(updateDto.getFirstName());
        }

        if (updateDto.getLastName() != null){
            user.setLastName(updateDto.getLastName());
        }

        // Aqui hashear√≠amos la password
        if (updateDto.getPassword() != null){
            user.setPassword(updateDto.getPassword());
        }
        if (updateDto.getEmail() != null){
            user.setEmail(updateDto.getEmail());
        }

        if (updateDto.getAddress() != null){
            user.setAddress(updateDto.getAddress());
        }

    }


}
